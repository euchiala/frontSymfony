{"version":3,"sources":["index.js"],"names":["document","querySelector","querySelectorWithScope","querySelectorAllWithScope","matchesWithScope","closestWithScope","ElementPrototype","arguments","scope","elementOrNodeList","selectors","removeAttribute","apply","this","polyfill","querySelectorAll","qsa","attr","test","Math","floor","random","replace","setAttribute","matches","closest","Element","prototype"],"mappings":"AAAA,IAMEA,SAAYC,cAAA,UAAZ,CAgED,CA7DC,MAAIC,GAOJ,CAAA,SAAIC,GAgBJ,IARKC,EASAC,EADDC,EAAAA,oBAkBDC,EAAiCC,EAAOF,EAExCL,aAFwC,EAlCvCE,GAwCDG,EAAIG,cAA8B,SAElCC,GACA,OAAKC,EAELC,MAAAC,KAAAN,SAFKI,CAGL,EA9C6BG,EAASR,EAAiBS,gBAAlB,GAwBxC,SAASD,EAASE,GACjB,OAAO,SAAUN,GAEhB,IAIKO,EASAR,EAXL,OAFeC,GAAaF,EAAMU,KAAKR,CAAX,GAIvBO,EAAO,IAAME,KAAKC,MAAsB,IAAhBD,KAAKE,OAAL,CAAX,EAAsC,IAGvDd,UAAU,GAAKG,EAAUY,QAAQd,EAAO,IAAMS,EAAO,GAAtC,EAGfJ,KAAKU,aAAaN,EAAM,EAAxB,EAGIR,EAAoBO,EAAIJ,MAAMC,KAAMN,SAAhB,EAGxBM,KAAKF,gBAAgBM,CAArB,EAGOR,GAGAO,EAAIJ,MAAMC,KAAMN,SAAhB,CAER,CACD,CAlDDD,EAAiBS,iBAAmB,SAA0BL,GAC7D,OAAOP,EAA0BS,MAAMC,KAAMN,SAAtC,CACP,EAGGD,EAAiBkB,UAChBpB,EAAmBU,EAASR,EAAiBkB,OAAlB,EAE/BlB,EAAiBkB,QAAU,SAAiBd,GAC3C,OAAON,EAAiBQ,MAAMC,KAAMN,SAA7B,CACP,GAIED,EAAiBmB,UAChBpB,EAAmBS,EAASR,EAAiBmB,OAAlB,EAE/BnB,EAAiBmB,QAAU,SAAiBf,GAC3C,OAAOL,EAAiBO,MAAMC,KAAMN,SAA7B,CACP,EArBF,EAqDEmB,QAAQC,SArDV,CAsDD","file":"index.js","sourcesContent":["try {\n\t// test for scope support\n\tdocument.querySelector(':scope *');\n} catch (error) {\n\t(function (ElementPrototype) {\n\t\t// scope regex\n\t\tvar scope = /:scope(?![\\w-])/gi;\n\n\t\t// polyfill Element#querySelector\n\t\tvar querySelectorWithScope = polyfill(ElementPrototype.querySelector);\n\n\t\tElementPrototype.querySelector = function querySelector(selectors) {\n\t\t\treturn querySelectorWithScope.apply(this, arguments);\n\t\t};\n\n\t\t// polyfill Element#querySelectorAll\n\t\tvar querySelectorAllWithScope = polyfill(ElementPrototype.querySelectorAll);\n\n\t\tElementPrototype.querySelectorAll = function querySelectorAll(selectors) {\n\t\t\treturn querySelectorAllWithScope.apply(this, arguments);\n\t\t};\n\n\t\t// polyfill Element#matches\n\t\tif (ElementPrototype.matches) {\n\t\t\tvar matchesWithScope = polyfill(ElementPrototype.matches);\n\n\t\t\tElementPrototype.matches = function matches(selectors) {\n\t\t\t\treturn matchesWithScope.apply(this, arguments);\n\t\t\t};\n\t\t}\n\n\t\t// polyfill Element#closest\n\t\tif (ElementPrototype.closest) {\n\t\t\tvar closestWithScope = polyfill(ElementPrototype.closest);\n\n\t\t\tElementPrototype.closest = function closest(selectors) {\n\t\t\t\treturn closestWithScope.apply(this, arguments);\n\t\t\t};\n\t\t}\n\n\t\tfunction polyfill(qsa) {\n\t\t\treturn function (selectors) {\n\t\t\t\t// whether the selectors contain :scope\n\t\t\t\tvar hasScope = selectors && scope.test(selectors);\n\n\t\t\t\tif (hasScope) {\n\t\t\t\t\t// fallback attribute\n\t\t\t\t\tvar attr = 'q' + Math.floor(Math.random() * 9000000) + 1000000;\n\n\t\t\t\t\t// replace :scope with the fallback attribute\n\t\t\t\t\targuments[0] = selectors.replace(scope, '[' + attr + ']');\n\n\t\t\t\t\t// add the fallback attribute\n\t\t\t\t\tthis.setAttribute(attr, '');\n\n\t\t\t\t\t// results of the qsa\n\t\t\t\t\tvar elementOrNodeList = qsa.apply(this, arguments);\n\n\t\t\t\t\t// remove the fallback attribute\n\t\t\t\t\tthis.removeAttribute(attr);\n\n\t\t\t\t\t// return the results of the qsa\n\t\t\t\t\treturn elementOrNodeList;\n\t\t\t\t} else {\n\t\t\t\t\t// return the results of the qsa\n\t\t\t\t\treturn qsa.apply(this, arguments);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t})(Element.prototype);\n}\n"]}